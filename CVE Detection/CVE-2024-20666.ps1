<#
    .SYNOPSIS
        CVE Detection - CVE-2024-20666
    .DESCRIPTION
        This script mounts the Windows Recovery Environment (WinRE) image and tests whether it is vulnerable to CVE-2024-20666 or whether it is of sufficient version or contains the correct packages to be considered patched against the CVE.
    .NOTES
        2024-01-1: Initial version
    .LINK
        Blog post: https://homotechsual.dev/2023/03/15/CVE-Monitoring-NinjaOne/
#>
[CmdletBinding()]
param (
    [Parameter(ParameterSetName = 'Package', Mandatory = $true)]
    [Switch]$CheckPackage,
    [Parameter(ParameterSetName = 'Image', Mandatory = $true)]
    [Switch]$CheckImage,
    [Parameter(ParameterSetName = 'Package')]
    [System.IO.DirectoryInfo]$MountDirectory = 'C:\RMM\WinRE\Mount',
    [Parameter(ParameterSetName = 'Package')]
    [System.IO.DirectoryInfo]$LogDirectory = 'C:\RMM\WinRE\Logs'
)
$WinREEnabled = (reagentc /info | findstr 'Enabled').Replace('Windows RE status: ', '').Trim()
if (-not ($WinREEnabled)) {
    Write-Warning 'Windows RE is disabled - exiting...'
    return $false
}
$WinREImagePath = (reagentc /info | findstr '\\?\GLOBALROOT\device').Replace('Windows RE location: ', '').Trim() + '\winre.wim'
$WinREBuild = (Get-WindowsImage -ImagePath $WinREImagePath -Index 1).SPBuild
# $WinREModified = (Get-WindowsImage -ImagePath $WinREImagePath -Index 1).ModifiedTime
$WinOSBuild = [System.Environment]::OSVersion.Version.Build
$BuildtoKBMap = @{
    22631 = 5031894 # 23H2
    22621 = 5034234 # 22H2
    22000 = 5034236 # 21H2
    19045 = 5034232 # 22H2
    19044 = 5034232 # 21H2
}
function Mount-WinRE {
    if (-not(Test-Path $MountDirectory)) {
        New-Item $MountDirectory -ItemType Directory
    } else {
        $MountDirectoryContents = Get-ChildItem $MountDirectory 
        if ($MountDirectoryContents) {
            Write-Warning "Mount directory isn't empty - exiting..."
            return $false
        }
    }
    if ((Get-WindowsImage -Mounted).count -ge 1) {
        Write-Warning 'There is at least one other image mounted already = exiting...'
        return $false
    }
    $Mount = ReAgentC.exe /mountre /path $MountDirectory
    if ($Mount) {
        if ($Mount[0] -notmatch '.*\d+.*' -and (Get-WindowsImage -Mounted).count -ge 1 -and $LASTEXITCODE -eq 0) {
            return $true
        }
    } else {
        Write-Warning 'Could not mount WinRE image.'
        Write-Warning "$Mount"
        return $false
    }
}

function Dismount-WinRE {
    $DismountImageLogFile = Join-Path -Path $LogDirectory -ChildPath ('Dismount-WindowsImage_{0}.log' -f $DateTime)
    $DismountWinRECommonParameters = @{
        Path = $MountDirectory
        LogLevel = 'WarningsInfo'
    }
    $UnmountDiscard = ReAgentC.exe /unmountre /path $($MountDirectory) /discard
    if (($UnmountDiscard[0] -match '.*\d+.*') -or $LASTEXITCODE -ne 0) {
        Write-Warning 'Attempting to unmount and discard failed - trying alternative method'
        Dismount-WindowsImage @DismountWinRECommonParameters -LogPath $DismountImageLogFile -Discard
        if ($(Get-WindowsImage -Mounted).count -ge 1) {
            Write-Warning 'Unmounting failed, including alternative methods.'
            return $false
        } else {
            return $true
        }
    } else {
        return $true
    }
}

if ($CheckPackage) {
    if (-not (Mount-WinRE)) {
        Write-Warning 'Could not mount WinRE image - exiting...'
        exit 1
    }
    $KB = ('KB{0}' -f $BuildtoKBMap[$WinOSBuild])
    $PackageApplied = (Get-WindowsPackage -Path $MountDirectory | Where-Object { $_.PackageName -like "*$KB*" }).PackageState -eq 'Installed'
    if (-not (Dismount-WinRE)) {
        Write-Warning 'Could not dismount WinRE image - exiting...'
        exit 1
    }
    if (-not ($PackageApplied)) {
        Write-Warning 'SafeOS Dynamic Update Package not present in WinRE image.'
        $Vulnerable = $true
    } else {
        Write-Output 'SafeOS Dynamic Update Package present in WinRE image.'
        $Vulnerable = $false
    }
}

if ($CheckImage) {
    # Unsure on this check - tested on a 23H2 machine and it appears to have the same number as a 22H2.
    if (($WinOSBuild -in @(22631)) -and ($WinREBuild -lt 815)) {
        $Vulnerable = $true
    } elseif (($WinOSBuild -eq 22621) -and ($WinREBuild -lt 815)) {
        $Vulnerable = $true
    } elseif (($WinOSBuild -in @(19045, 19044)) -and ($WinREBuild -lt 2247)) {
        $Vulnerable = $true
    } else {
        $Vulnerable = $false
    }
}
if ($Vulnerable) {
    Write-Warning 'Vulnerable to CVE-2024-20666'
    Ninja-Property-Set CVE202420666 1
} else {
    Write-Output 'Not vulnerable to CVE-2024-20666'
    Ninja-Property-Set CVE202420666 0
}